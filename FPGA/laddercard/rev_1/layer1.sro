%%% protect protected_file
# Created by Synplify Verilog HDL Compiler version comp510rc, Build 073R from Synplicity, Inc.
# Copyright 1994-2010 Synopsys, Inc. , All rights reserved.
# Synthesis Netlist written on Wed Mar 09 16:21:06 2011
#
#
#OPTIONS:"|-mixedhdl|-modhint|_verilog_hintfile|-top|work.altpll|-top|work.cycloneiii_crcblock|-mpparams|_mh_params|-layerid|1|-useclone|-ui|-I|D:\\renard\\star_upgrade\\ladder_fpga\\|-I|C:\\Synopsys\\fpga_D201003SP1\\lib|-v2001|-devicelib|C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\altera.v|-devicelib|C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\cycloneiii.v|-devicelib|C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\altera_mf.v|-devicelib|C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\altera_lpm.v|-devicelib|C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\altera_primitives.v|-ll|2000|-ui|-fid2|-ram|-sharing|off|-autosm|-lib|work"
#CUR:"C:\\Synopsys\\fpga_D201003SP1\\bin\\c_ver.exe":1273856902
#CUR:"_verilog_hintfile":1299684066
#CUR:"C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\altera.v":1273864942
#CUR:"C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\cycloneiii.v":1273864978
#CUR:"C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\altera_mf.v":1273864978
#CUR:"C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\altera_lpm.v":1273864978
#CUR:"C:\\Synopsys\\fpga_D201003SP1\\lib\\altera\\quartus_II72\\altera_primitives.v":1273864978
#CUR:"C:\\altera\\10.0\\quartus\\eda\\fv_lib\\verilog\\cycloneiii_crcblock.v":1277674056
f "C:\Synopsys\fpga_D201003SP1\lib\altera\altera.v"; # file 0
af .is_verilog 1;
f "C:\Synopsys\fpga_D201003SP1\lib\altera\quartus_II72\cycloneiii.v"; # file 1
af .is_verilog 1;
f "C:\Synopsys\fpga_D201003SP1\lib\altera\quartus_II72\altera_mf.v"; # file 2
af .is_verilog 1;
f "C:\Synopsys\fpga_D201003SP1\lib\altera\quartus_II72\altera_lpm.v"; # file 3
af .is_verilog 1;
f "C:\Synopsys\fpga_D201003SP1\lib\altera\quartus_II72\altera_primitives.v"; # file 4
af .is_verilog 1;
f "C:\altera\10.0\quartus\eda\fv_lib\verilog\cycloneiii_crcblock.v"; # file 5
af .is_verilog 1;
ftell;
n @@5:14:8:14:26 work cycloneiii_crcblock_1s_cycloneiii_crcblock verilog;
av .external 1;
av .isverilog 1;
av .is_verilog 1;
av .origName "cycloneiii_crcblock";
av .langParams "oscillator_divider lpm_type";
av oscillator_divider 1;
av lpm_type "cycloneiii_crcblock";
av .passedParams "oscillator_divider lpm_type";
av .syn_attformatsize "oscillator_divider=32 ";
av .syn_attformat "oscillator_divider=D ";
i @@5:19:6:19:8 clk clk;
ai .rtl_origname "clk";
i @@5:20:6:20:13 shiftnld shiftnld;
ai .rtl_origname "shiftnld";
i @@5:21:6:21:10 ldsrc ldsrc;
ai .rtl_origname "ldsrc";
o @@5:22:7:22:14 crcerror crcerror;
ai .rtl_origname "crcerror";
o @@5:23:7:23:12 regout regout;
ai .rtl_origname "regout";
p @@0:1:1:1:2 true true true;
p @@0:1:1:1:2 false false false;
p @@5:22:7:22:14 z crcerror crcerror;
p @@5:23:7:23:12 z regout regout;
ftell;
n @@2:1636:7:1636:12 work altpll_Z1_layer1 verilog;
av .external 1;
av .isverilog 1;
av .is_verilog 1;
av .origName "altpll";
av .langParams "bandwidth bandwidth_type c0_high c0_initial c0_low c0_mode c0_ph c0_test_source c1_high c1_initial c1_low c1_mode c1_ph c1_test_source c1_use_casc_in c2_high c2_initial c2_low c2_mode c2_ph c2_test_source c2_use_casc_in c3_high c3_initial c3_low c3_mode c3_ph c3_test_source c3_use_casc_in c4_high c4_initial c4_low c4_mode c4_ph c4_test_source c4_use_casc_in c5_high c5_initial c5_low c5_mode c5_ph c5_test_source c5_use_casc_in c6_high c6_initial c6_low c6_mode c6_ph c6_test_source c6_use_casc_in c7_high c7_initial c7_low c7_mode c7_ph c7_test_source c7_use_casc_in c8_high c8_initial c8_low c8_mode c8_ph c8_test_source c8_use_casc_in c9_high c9_initial c9_low c9_mode c9_ph c9_test_source c9_use_casc_in charge_pump_current charge_pump_current_bits clk0_counter clk0_divide_by clk0_duty_cycle clk0_multiply_by clk0_output_frequency clk0_phase_shift clk0_time_delay clk0_use_even_counter_mode clk0_use_even_counter_value clk1_counter clk1_divide_by clk1_duty_cycle clk1_multiply_by clk1_output_frequency clk1_phase_shift clk1_time_delay clk1_use_even_counter_mode clk1_use_even_counter_value clk2_counter clk2_divide_by clk2_duty_cycle clk2_multiply_by clk2_output_frequency clk2_phase_shift clk2_time_delay clk2_use_even_counter_mode clk2_use_even_counter_value clk3_counter clk3_divide_by clk3_duty_cycle clk3_multiply_by clk3_phase_shift clk3_time_delay clk3_use_even_counter_mode clk3_use_even_counter_value clk4_counter clk4_divide_by clk4_duty_cycle clk4_multiply_by clk4_phase_shift clk4_time_delay clk4_use_even_counter_mode clk4_use_even_counter_value clk5_counter clk5_divide_by clk5_duty_cycle clk5_multiply_by clk5_phase_shift clk5_time_delay clk5_use_even_counter_mode clk5_use_even_counter_value clk6_counter clk6_divide_by clk6_duty_cycle clk6_multiply_by clk6_phase_shift clk6_use_even_counter_mode clk6_use_even_counter_value clk7_counter clk7_divide_by clk7_duty_cycle clk7_multiply_by clk7_phase_shift clk7_use_even_counter_mode clk7_use_even_counter_value clk8_counter clk8_divide_by clk8_duty_cycle clk8_multiply_by clk8_phase_shift clk8_use_even_counter_mode clk8_use_even_counter_value clk9_counter clk9_divide_by clk9_duty_cycle clk9_multiply_by clk9_phase_shift clk9_use_even_counter_mode clk9_use_even_counter_value compensate_clock down_spread e0_high e0_initial e0_low e0_mode e0_ph e0_time_delay e1_high e1_initial e1_low e1_mode e1_ph e1_time_delay e2_high e2_initial e2_low e2_mode e2_ph e2_time_delay e3_high e3_initial e3_low e3_mode e3_ph e3_time_delay enable0_counter enable1_counter enable_switch_over_counter extclk0_counter extclk0_divide_by extclk0_duty_cycle extclk0_multiply_by extclk0_phase_shift extclk0_time_delay extclk1_counter extclk1_divide_by extclk1_duty_cycle extclk1_multiply_by extclk1_phase_shift extclk1_time_delay extclk2_counter extclk2_divide_by extclk2_duty_cycle extclk2_multiply_by extclk2_phase_shift extclk2_time_delay extclk3_counter extclk3_divide_by extclk3_duty_cycle extclk3_multiply_by extclk3_phase_shift extclk3_time_delay feedback_source g0_high g0_initial g0_low g0_mode g0_ph g0_time_delay g1_high g1_initial g1_low g1_mode g1_ph g1_time_delay g2_high g2_initial g2_low g2_mode g2_ph g2_time_delay g3_high g3_initial g3_low g3_mode g3_ph g3_time_delay gate_lock_counter gate_lock_signal inclk0_input_frequency inclk1_input_frequency intended_device_family invalid_lock_multiplier l0_high l0_initial l0_low l0_mode l0_ph l0_time_delay l1_high l1_initial l1_low l1_mode l1_ph l1_time_delay lock_high lock_low lock_window_ui lock_window_ui_bits loop_filter_c loop_filter_c_bits loop_filter_r loop_filter_r_bits lpm_hint lpm_type m m2 m_initial m_ph m_test_source m_time_delay n n2 n_time_delay operation_mode pfd_max pfd_min pll_type port_activeclock port_areset port_clk0 port_clk1 port_clk2 port_clk3 port_clk4 port_clk5 port_clk6 port_clk7 port_clk8 port_clk9 port_clkbad0 port_clkbad1 port_clkena0 port_clkena1 port_clkena2 port_clkena3 port_clkena4 port_clkena5 port_clkloss port_clkswitch port_configupdate port_enable0 port_enable1 port_extclk0 port_extclk1 port_extclk2 port_extclk3 port_extclkena0 port_extclkena1 port_extclkena2 port_extclkena3 port_fbin port_fbout port_inclk0 port_inclk1 port_locked port_pfdena port_phasecounterselect port_phasedone port_phasestep port_phaseupdown port_pllena port_scanaclr port_scanclk port_scanclkena port_scandata port_scandataout port_scandone port_scanread port_scanwrite port_sclkout0 port_sclkout1 port_vcooverrange port_vcounderrange primary_clock qualify_conf_done scan_chain scan_chain_mif_file sclkout0_phase_shift sclkout1_phase_shift self_reset_on_gated_loss_lock self_reset_on_loss_lock skip_vco spread_frequency ss switch_over_counter switch_over_on_gated_lock switch_over_on_lossclk switch_over_type using_fbmimicbidir_port valid_lock_multiplier vco_center vco_divide_by vco_frequency_control vco_max vco_min vco_multiply_by vco_phase_shift_step vco_post_scale vco_range_detector_high_bits vco_range_detector_low_bits width_clock width_phasecounterselect";
av bandwidth 0;
av bandwidth_type "AUTO";
av c0_high 0;
av c0_initial 0;
av c0_low 0;
av c0_mode "BYPASS";
av c0_ph 0;
av c0_test_source 5;
av c1_high 0;
av c1_initial 0;
av c1_low 0;
av c1_mode "BYPASS";
av c1_ph 0;
av c1_test_source 5;
av c1_use_casc_in "OFF";
av c2_high 0;
av c2_initial 0;
av c2_low 0;
av c2_mode "BYPASS";
av c2_ph 0;
av c2_test_source 5;
av c2_use_casc_in "OFF";
av c3_high 0;
av c3_initial 0;
av c3_low 0;
av c3_mode "BYPASS";
av c3_ph 0;
av c3_test_source 5;
av c3_use_casc_in "OFF";
av c4_high 0;
av c4_initial 0;
av c4_low 0;
av c4_mode "BYPASS";
av c4_ph 0;
av c4_test_source 5;
av c4_use_casc_in "OFF";
av c5_high 0;
av c5_initial 0;
av c5_low 0;
av c5_mode "BYPASS";
av c5_ph 0;
av c5_test_source 5;
av c5_use_casc_in "OFF";
av c6_high 0;
av c6_initial 0;
av c6_low 0;
av c6_mode "BYPASS";
av c6_ph 0;
av c6_test_source 5;
av c6_use_casc_in "OFF";
av c7_high 0;
av c7_initial 0;
av c7_low 0;
av c7_mode "BYPASS";
av c7_ph 0;
av c7_test_source 5;
av c7_use_casc_in "OFF";
av c8_high 0;
av c8_initial 0;
av c8_low 0;
av c8_mode "BYPASS";
av c8_ph 0;
av c8_test_source 5;
av c8_use_casc_in "OFF";
av c9_high 0;
av c9_initial 0;
av c9_low 0;
av c9_mode "BYPASS";
av c9_ph 0;
av c9_test_source 5;
av c9_use_casc_in "OFF";
av charge_pump_current 2;
av charge_pump_current_bits 9999;
av clk0_counter "G0";
av clk0_divide_by 1;
av clk0_duty_cycle 50;
av clk0_multiply_by 1;
av clk0_output_frequency 0;
av clk0_phase_shift "0";
av clk0_time_delay "0";
av clk0_use_even_counter_mode "OFF";
av clk0_use_even_counter_value "OFF";
av clk1_counter "G0";
av clk1_divide_by 1;
av clk1_duty_cycle 50;
av clk1_multiply_by 2;
av clk1_output_frequency 0;
av clk1_phase_shift "0";
av clk1_time_delay "0";
av clk1_use_even_counter_mode "OFF";
av clk1_use_even_counter_value "OFF";
av clk2_counter "G0";
av clk2_divide_by 10;
av clk2_duty_cycle 50;
av clk2_multiply_by 1;
av clk2_output_frequency 0;
av clk2_phase_shift "0";
av clk2_time_delay "0";
av clk2_use_even_counter_mode "OFF";
av clk2_use_even_counter_value "OFF";
av clk3_counter "G0";
av clk3_divide_by 40;
av clk3_duty_cycle 50;
av clk3_multiply_by 1;
av clk3_phase_shift "0";
av clk3_time_delay "0";
av clk3_use_even_counter_mode "OFF";
av clk3_use_even_counter_value "OFF";
av clk4_counter "G0";
av clk4_divide_by 1;
av clk4_duty_cycle 50;
av clk4_multiply_by 1;
av clk4_phase_shift "0";
av clk4_time_delay "0";
av clk4_use_even_counter_mode "OFF";
av clk4_use_even_counter_value "OFF";
av clk5_counter "G0";
av clk5_divide_by 1;
av clk5_duty_cycle 50;
av clk5_multiply_by 1;
av clk5_phase_shift "0";
av clk5_time_delay "0";
av clk5_use_even_counter_mode "OFF";
av clk5_use_even_counter_value "OFF";
av clk6_counter "E0";
av clk6_divide_by 0;
av clk6_duty_cycle 50;
av clk6_multiply_by 0;
av clk6_phase_shift "0";
av clk6_use_even_counter_mode "OFF";
av clk6_use_even_counter_value "OFF";
av clk7_counter "E1";
av clk7_divide_by 0;
av clk7_duty_cycle 50;
av clk7_multiply_by 0;
av clk7_phase_shift "0";
av clk7_use_even_counter_mode "OFF";
av clk7_use_even_counter_value "OFF";
av clk8_counter "E2";
av clk8_divide_by 0;
av clk8_duty_cycle 50;
av clk8_multiply_by 0;
av clk8_phase_shift "0";
av clk8_use_even_counter_mode "OFF";
av clk8_use_even_counter_value "OFF";
av clk9_counter "E3";
av clk9_divide_by 0;
av clk9_duty_cycle 50;
av clk9_multiply_by 0;
av clk9_phase_shift "0";
av clk9_use_even_counter_mode "OFF";
av clk9_use_even_counter_value "OFF";
av compensate_clock "CLK0";
av down_spread "0";
av e0_high 1;
av e0_initial 1;
av e0_low 1;
av e0_mode "BYPASS";
av e0_ph 0;
av e0_time_delay 0;
av e1_high 1;
av e1_initial 1;
av e1_low 1;
av e1_mode "BYPASS";
av e1_ph 0;
av e1_time_delay 0;
av e2_high 1;
av e2_initial 1;
av e2_low 1;
av e2_mode "BYPASS";
av e2_ph 0;
av e2_time_delay 0;
av e3_high 1;
av e3_initial 1;
av e3_low 1;
av e3_mode "BYPASS";
av e3_ph 0;
av e3_time_delay 0;
av enable0_counter "L0";
av enable1_counter "L0";
av enable_switch_over_counter "OFF";
av extclk0_counter "E0";
av extclk0_divide_by 1;
av extclk0_duty_cycle 50;
av extclk0_multiply_by 1;
av extclk0_phase_shift "0";
av extclk0_time_delay "0";
av extclk1_counter "E1";
av extclk1_divide_by 1;
av extclk1_duty_cycle 50;
av extclk1_multiply_by 1;
av extclk1_phase_shift "0";
av extclk1_time_delay "0";
av extclk2_counter "E2";
av extclk2_divide_by 1;
av extclk2_duty_cycle 50;
av extclk2_multiply_by 1;
av extclk2_phase_shift "0";
av extclk2_time_delay "0";
av extclk3_counter "E3";
av extclk3_divide_by 1;
av extclk3_duty_cycle 50;
av extclk3_multiply_by 1;
av extclk3_phase_shift "0";
av extclk3_time_delay "0";
av feedback_source "EXTCLK0";
av g0_high 1;
av g0_initial 1;
av g0_low 1;
av g0_mode "BYPASS";
av g0_ph 0;
av g0_time_delay 0;
av g1_high 1;
av g1_initial 1;
av g1_low 1;
av g1_mode "BYPASS";
av g1_ph 0;
av g1_time_delay 0;
av g2_high 1;
av g2_initial 1;
av g2_low 1;
av g2_mode "BYPASS";
av g2_ph 0;
av g2_time_delay 0;
av g3_high 1;
av g3_initial 1;
av g3_low 1;
av g3_mode "BYPASS";
av g3_ph 0;
av g3_time_delay 0;
av gate_lock_counter 0;
av gate_lock_signal "NO";
av inclk0_input_frequency 27472;
av inclk1_input_frequency 27472;
av intended_device_family "Cyclone III";
av invalid_lock_multiplier 5;
av l0_high 1;
av l0_initial 1;
av l0_low 1;
av l0_mode "BYPASS";
av l0_ph 0;
av l0_time_delay 0;
av l1_high 1;
av l1_initial 1;
av l1_low 1;
av l1_mode "BYPASS";
av l1_ph 0;
av l1_time_delay 0;
av lock_high 1;
av lock_low 1;
av lock_window_ui " 0.05";
av lock_window_ui_bits "UNUSED";
av loop_filter_c 5;
av loop_filter_c_bits 9999;
av loop_filter_r " 1.000000";
av loop_filter_r_bits 9999;
av lpm_hint "CBX_MODULE_PREFIX=mega_func_pll_40MHz_switchover_cycloneIII";
av lpm_type "altpll";
av m 0;
av m2 1;
av m_initial 0;
av m_ph 0;
av m_test_source 5;
av m_time_delay 0;
av n 1;
av n2 1;
av n_time_delay 0;
av operation_mode "NORMAL";
av pfd_max 0;
av pfd_min 0;
av pll_type "Fast";
av port_activeclock "PORT_USED";
av port_areset "PORT_USED";
av port_clk0 "PORT_USED";
av port_clk1 "PORT_USED";
av port_clk2 "PORT_USED";
av port_clk3 "PORT_USED";
av port_clk4 "PORT_UNUSED";
av port_clk5 "PORT_UNUSED";
av port_clk6 "PORT_CONNECTIVITY";
av port_clk7 "PORT_CONNECTIVITY";
av port_clk8 "PORT_CONNECTIVITY";
av port_clk9 "PORT_CONNECTIVITY";
av port_clkbad0 "PORT_USED";
av port_clkbad1 "PORT_USED";
av port_clkena0 "PORT_UNUSED";
av port_clkena1 "PORT_UNUSED";
av port_clkena2 "PORT_UNUSED";
av port_clkena3 "PORT_UNUSED";
av port_clkena4 "PORT_UNUSED";
av port_clkena5 "PORT_UNUSED";
av port_clkloss "PORT_UNUSED";
av port_clkswitch "PORT_USED";
av port_configupdate "PORT_UNUSED";
av port_enable0 "PORT_CONNECTIVITY";
av port_enable1 "PORT_CONNECTIVITY";
av port_extclk0 "PORT_UNUSED";
av port_extclk1 "PORT_UNUSED";
av port_extclk2 "PORT_UNUSED";
av port_extclk3 "PORT_UNUSED";
av port_extclkena0 "PORT_CONNECTIVITY";
av port_extclkena1 "PORT_CONNECTIVITY";
av port_extclkena2 "PORT_CONNECTIVITY";
av port_extclkena3 "PORT_CONNECTIVITY";
av port_fbin "PORT_UNUSED";
av port_fbout "PORT_CONNECTIVITY";
av port_inclk0 "PORT_USED";
av port_inclk1 "PORT_USED";
av port_locked "PORT_USED";
av port_pfdena "PORT_UNUSED";
av port_phasecounterselect "PORT_UNUSED";
av port_phasedone "PORT_UNUSED";
av port_phasestep "PORT_UNUSED";
av port_phaseupdown "PORT_UNUSED";
av port_pllena "PORT_UNUSED";
av port_scanaclr "PORT_UNUSED";
av port_scanclk "PORT_UNUSED";
av port_scanclkena "PORT_UNUSED";
av port_scandata "PORT_UNUSED";
av port_scandataout "PORT_UNUSED";
av port_scandone "PORT_UNUSED";
av port_scanread "PORT_UNUSED";
av port_scanwrite "PORT_UNUSED";
av port_sclkout0 "PORT_CONNECTIVITY";
av port_sclkout1 "PORT_CONNECTIVITY";
av port_vcooverrange "PORT_CONNECTIVITY";
av port_vcounderrange "PORT_CONNECTIVITY";
av primary_clock "inclk0";
av qualify_conf_done "OFF";
av scan_chain "LONG";
av scan_chain_mif_file "UNUSED";
av sclkout0_phase_shift "0";
av sclkout1_phase_shift "0";
av self_reset_on_gated_loss_lock "OFF";
av self_reset_on_loss_lock "OFF";
av skip_vco "OFF";
av spread_frequency 0;
av ss 1;
av switch_over_counter 0;
av switch_over_on_gated_lock "OFF";
av switch_over_on_lossclk "OFF";
av switch_over_type "AUTO";
av using_fbmimicbidir_port "OFF";
av valid_lock_multiplier 1;
av vco_center 0;
av vco_divide_by 0;
av vco_frequency_control "AUTO";
av vco_max 0;
av vco_min 0;
av vco_multiply_by 0;
av vco_phase_shift_step 0;
av vco_post_scale 0;
av vco_range_detector_high_bits "UNUSED";
av vco_range_detector_low_bits "UNUSED";
av width_clock 5;
av width_phasecounterselect 4;
av .passedParams "bandwidth_type clk0_divide_by clk0_duty_cycle clk0_multiply_by clk0_phase_shift clk1_divide_by clk1_duty_cycle clk1_multiply_by clk1_phase_shift clk2_divide_by clk2_duty_cycle clk2_multiply_by clk2_phase_shift clk3_divide_by clk3_duty_cycle clk3_multiply_by clk3_phase_shift compensate_clock inclk0_input_frequency inclk1_input_frequency intended_device_family lpm_hint lpm_type operation_mode pll_type port_activeclock port_areset port_clk0 port_clk1 port_clk2 port_clk3 port_clk4 port_clk5 port_clkbad0 port_clkbad1 port_clkena0 port_clkena1 port_clkena2 port_clkena3 port_clkena4 port_clkena5 port_clkloss port_clkswitch port_configupdate port_extclk0 port_extclk1 port_extclk2 port_extclk3 port_fbin port_inclk0 port_inclk1 port_locked port_pfdena port_phasecounterselect port_phasedone port_phasestep port_phaseupdown port_pllena port_scanaclr port_scanclk port_scanclkena port_scandata port_scandataout port_scandone port_scanread port_scanwrite primary_clock self_reset_on_loss_lock switch_over_type width_clock";
av .syn_attformatsize "bandwidth=32 c0_high=32 c0_initial=32 c0_low=32 c0_ph=32 c0_test_source=32 c1_high=32 c1_initial=32 c1_low=32 c1_ph=32 c1_test_source=32 c2_high=32 c2_initial=32 c2_low=32 c2_ph=32 c2_test_source=32 c3_high=32 c3_initial=32 c3_low=32 c3_ph=32 c3_test_source=32 c4_high=32 c4_initial=32 c4_low=32 c4_ph=32 c4_test_source=32 c5_high=32 c5_initial=32 c5_low=32 c5_ph=32 c5_test_source=32 c6_high=32 c6_initial=32 c6_low=32 c6_ph=32 c6_test_source=32 c7_high=32 c7_initial=32 c7_low=32 c7_ph=32 c7_test_source=32 c8_high=32 c8_initial=32 c8_low=32 c8_ph=32 c8_test_source=32 c9_high=32 c9_initial=32 c9_low=32 c9_ph=32 c9_test_source=32 charge_pump_current=32 charge_pump_current_bits=32 clk0_divide_by=32 clk0_duty_cycle=32 clk0_multiply_by=32 clk0_output_frequency=32 clk1_divide_by=32 clk1_duty_cycle=32 clk1_multiply_by=32 clk1_output_frequency=32 clk2_divide_by=32 clk2_duty_cycle=32 clk2_multiply_by=32 clk2_output_frequency=32 clk3_divide_by=32 clk3_duty_cycle=32 clk3_multiply_by=32 clk4_divide_by=32 clk4_duty_cycle=32 clk4_multiply_by=32 clk5_divide_by=32 clk5_duty_cycle=32 clk5_multiply_by=32 clk6_divide_by=32 clk6_duty_cycle=32 clk6_multiply_by=32 clk7_divide_by=32 clk7_duty_cycle=32 clk7_multiply_by=32 clk8_divide_by=32 clk8_duty_cycle=32 clk8_multiply_by=32 clk9_divide_by=32 clk9_duty_cycle=32 clk9_multiply_by=32 e0_high=32 e0_initial=32 e0_low=32 e0_ph=32 e0_time_delay=32 e1_high=32 e1_initial=32 e1_low=32 e1_ph=32 e1_time_delay=32 e2_high=32 e2_initial=32 e2_low=32 e2_ph=32 e2_time_delay=32 e3_high=32 e3_initial=32 e3_low=32 e3_ph=32 e3_time_delay=32 extclk0_divide_by=32 extclk0_duty_cycle=32 extclk0_multiply_by=32 extclk1_divide_by=32 extclk1_duty_cycle=32 extclk1_multiply_by=32 extclk2_divide_by=32 extclk2_duty_cycle=32 extclk2_multiply_by=32 extclk3_divide_by=32 extclk3_duty_cycle=32 extclk3_multiply_by=32 g0_high=32 g0_initial=32 g0_low=32 g0_ph=32 g0_time_delay=32 g1_high=32 g1_initial=32 g1_low=32 g1_ph=32 g1_time_delay=32 g2_high=32 g2_initial=32 g2_low=32 g2_ph=32 g2_time_delay=32 g3_high=32 g3_initial=32 g3_low=32 g3_ph=32 g3_time_delay=32 gate_lock_counter=32 inclk0_input_frequency=32 inclk1_input_frequency=32 invalid_lock_multiplier=32 l0_high=32 l0_initial=32 l0_low=32 l0_ph=32 l0_time_delay=32 l1_high=32 l1_initial=32 l1_low=32 l1_ph=32 l1_time_delay=32 lock_high=32 lock_low=32 loop_filter_c=32 loop_filter_c_bits=32 loop_filter_r_bits=32 m=32 m2=32 m_initial=32 m_ph=32 m_test_source=32 m_time_delay=32 n=32 n2=32 n_time_delay=32 pfd_max=32 pfd_min=32 spread_frequency=32 ss=32 switch_over_counter=32 valid_lock_multiplier=32 vco_center=32 vco_divide_by=32 vco_max=32 vco_min=32 vco_multiply_by=32 vco_phase_shift_step=32 vco_post_scale=32 width_clock=32 width_phasecounterselect=32 ";
av .syn_attformat "bandwidth=D c0_high=D c0_initial=D c0_low=D c0_ph=D c0_test_source=D c1_high=D c1_initial=D c1_low=D c1_ph=D c1_test_source=D c2_high=D c2_initial=D c2_low=D c2_ph=D c2_test_source=D c3_high=D c3_initial=D c3_low=D c3_ph=D c3_test_source=D c4_high=D c4_initial=D c4_low=D c4_ph=D c4_test_source=D c5_high=D c5_initial=D c5_low=D c5_ph=D c5_test_source=D c6_high=D c6_initial=D c6_low=D c6_ph=D c6_test_source=D c7_high=D c7_initial=D c7_low=D c7_ph=D c7_test_source=D c8_high=D c8_initial=D c8_low=D c8_ph=D c8_test_source=D c9_high=D c9_initial=D c9_low=D c9_ph=D c9_test_source=D charge_pump_current=D charge_pump_current_bits=D clk0_divide_by=D clk0_duty_cycle=D clk0_multiply_by=D clk0_output_frequency=D clk1_divide_by=D clk1_duty_cycle=D clk1_multiply_by=D clk1_output_frequency=D clk2_divide_by=D clk2_duty_cycle=D clk2_multiply_by=D clk2_output_frequency=D clk3_divide_by=D clk3_duty_cycle=D clk3_multiply_by=D clk4_divide_by=D clk4_duty_cycle=D clk4_multiply_by=D clk5_divide_by=D clk5_duty_cycle=D clk5_multiply_by=D clk6_divide_by=D clk6_duty_cycle=D clk6_multiply_by=D clk7_divide_by=D clk7_duty_cycle=D clk7_multiply_by=D clk8_divide_by=D clk8_duty_cycle=D clk8_multiply_by=D clk9_divide_by=D clk9_duty_cycle=D clk9_multiply_by=D e0_high=D e0_initial=D e0_low=D e0_ph=D e0_time_delay=D e1_high=D e1_initial=D e1_low=D e1_ph=D e1_time_delay=D e2_high=D e2_initial=D e2_low=D e2_ph=D e2_time_delay=D e3_high=D e3_initial=D e3_low=D e3_ph=D e3_time_delay=D extclk0_divide_by=D extclk0_duty_cycle=D extclk0_multiply_by=D extclk1_divide_by=D extclk1_duty_cycle=D extclk1_multiply_by=D extclk2_divide_by=D extclk2_duty_cycle=D extclk2_multiply_by=D extclk3_divide_by=D extclk3_duty_cycle=D extclk3_multiply_by=D g0_high=D g0_initial=D g0_low=D g0_ph=D g0_time_delay=D g1_high=D g1_initial=D g1_low=D g1_ph=D g1_time_delay=D g2_high=D g2_initial=D g2_low=D g2_ph=D g2_time_delay=D g3_high=D g3_initial=D g3_low=D g3_ph=D g3_time_delay=D gate_lock_counter=D inclk0_input_frequency=D inclk1_input_frequency=D invalid_lock_multiplier=D l0_high=D l0_initial=D l0_low=D l0_ph=D l0_time_delay=D l1_high=D l1_initial=D l1_low=D l1_ph=D l1_time_delay=D lock_high=D lock_low=D loop_filter_c=D loop_filter_c_bits=D loop_filter_r_bits=D m=D m2=D m_initial=D m_ph=D m_test_source=D m_time_delay=D n=D n2=D n_time_delay=D pfd_max=D pfd_min=D spread_frequency=D ss=D switch_over_counter=D valid_lock_multiplier=D vco_center=D vco_divide_by=D vco_max=D vco_min=D vco_multiply_by=D vco_phase_shift_step=D vco_post_scale=D width_clock=D width_phasecounterselect=D ";
av .syn_lib_cell 1;
av syn_lib_cell 1;
o @@2:2031:8:2031:18 activeclock activeclock;
ai .rtl_origname "activeclock";
i @@2:2032:7:2032:12 areset areset;
ai .rtl_origname "areset";
o @@2:2033:26:2033:28 clk[4:0] clk[4:0];
ai .rtl_origname "clk";
o @@2:2034:14:2034:19 clkbad[1:0] clkbad[1:0];
ai .rtl_origname "clkbad";
i @@2:2035:13:2035:18 clkena[5:0] clkena[5:0];
ai .rtl_origname "clkena";
o @@2:2036:8:2036:14 clkloss clkloss;
ai .rtl_origname "clkloss";
i @@2:2037:7:2037:15 clkswitch clkswitch;
ai .rtl_origname "clkswitch";
i @@2:2038:7:2038:18 configupdate configupdate;
ai .rtl_origname "configupdate";
o @@2:2039:8:2039:14 enable0 enable0;
ai .rtl_origname "enable0";
o @@2:2040:8:2040:14 enable1 enable1;
ai .rtl_origname "enable1";
o @@2:2041:14:2041:19 extclk[3:0] extclk[3:0];
ai .rtl_origname "extclk";
i @@2:2042:13:2042:21 extclkena[3:0] extclkena[3:0];
ai .rtl_origname "extclkena";
i @@2:2043:7:2043:10 fbin fbin;
ai .rtl_origname "fbin";
b @@2:2044:7:2044:18 fbmimicbidir fbmimicbidir;
ai .rtl_origname "fbmimicbidir";
o @@2:2045:8:2045:12 fbout fbout;
ai .rtl_origname "fbout";
i @@2:2046:13:2046:17 inclk[1:0] inclk[1:0];
ai .rtl_origname "inclk";
o @@2:2047:8:2047:13 locked locked;
ai .rtl_origname "locked";
i @@2:2048:7:2048:12 pfdena pfdena;
ai .rtl_origname "pfdena";
i @@2:2049:38:2049:55 phasecounterselect[3:0] phasecounterselect[3:0];
ai .rtl_origname "phasecounterselect";
o @@2:2050:8:2050:16 phasedone phasedone;
ai .rtl_origname "phasedone";
i @@2:2051:7:2051:15 phasestep phasestep;
ai .rtl_origname "phasestep";
i @@2:2052:7:2052:17 phaseupdown phaseupdown;
ai .rtl_origname "phaseupdown";
i @@2:2053:7:2053:12 pllena pllena;
ai .rtl_origname "pllena";
i @@2:2054:7:2054:14 scanaclr scanaclr;
ai .rtl_origname "scanaclr";
i @@2:2055:7:2055:13 scanclk scanclk;
ai .rtl_origname "scanclk";
i @@2:2056:7:2056:16 scanclkena scanclkena;
ai .rtl_origname "scanclkena";
i @@2:2057:7:2057:14 scandata scandata;
ai .rtl_origname "scandata";
o @@2:2058:8:2058:18 scandataout scandataout;
ai .rtl_origname "scandataout";
o @@2:2059:8:2059:15 scandone scandone;
ai .rtl_origname "scandone";
i @@2:2060:7:2060:14 scanread scanread;
ai .rtl_origname "scanread";
i @@2:2061:7:2061:15 scanwrite scanwrite;
ai .rtl_origname "scanwrite";
o @@2:2062:8:2062:15 sclkout0 sclkout0;
ai .rtl_origname "sclkout0";
o @@2:2063:8:2063:15 sclkout1 sclkout1;
ai .rtl_origname "sclkout1";
o @@2:2064:8:2064:19 vcooverrange vcooverrange;
ai .rtl_origname "vcooverrange";
o @@2:2065:8:2065:20 vcounderrange vcounderrange;
ai .rtl_origname "vcounderrange";
p @@0:1:1:1:2 true true true;
p @@0:1:1:1:2 false false false;
p @@2:2031:8:2031:18 z activeclock activeclock;
p @@2:2033:26:2033:28 z clk[4:0] clk[4:0];
p @@2:2034:14:2034:19 z clkbad[1:0] clkbad[1:0];
p @@2:2036:8:2036:14 z clkloss clkloss;
p @@2:2039:8:2039:14 z enable0 enable0;
p @@2:2040:8:2040:14 z enable1 enable1;
p @@2:2041:14:2041:19 z extclk[3:0] extclk[3:0];
p @@2:2045:8:2045:12 z fbout fbout;
p @@2:2047:8:2047:13 z locked locked;
p @@2:2050:8:2050:16 z phasedone phasedone;
p @@2:2058:8:2058:18 z scandataout scandataout;
p @@2:2059:8:2059:15 z scandone scandone;
p @@2:2062:8:2062:15 z sclkout0 sclkout0;
p @@2:2063:8:2063:15 z sclkout1 sclkout1;
p @@2:2064:8:2064:19 z vcooverrange vcooverrange;
p @@2:2065:8:2065:20 z vcounderrange vcounderrange;
